<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document Upload Portal</title>
    <link rel="stylesheet" href="/doc.css" />
  </head>
  <body>
    <a href="/business-associate/ass?id=<%=employee._id%>" class="back-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M19 12H5M12 19l-7-7 7-7" />
      </svg>
    </a>
    <div class="container">
      <div class="card">
        <h1 class="title">Document Upload Portal</h1>
        <!-- Upload Area -->
        <form
          action="/upload-post"
          novalidate
          enctype="multipart/form-data"
          method="POST"
        >
          <input type="hidden" value="<%=employee._id%>" name="id" />
          <div class="upload-area" id="dropZone">
            <svg
              class="upload-icon"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="17 8 12 3 7 8"></polyline>
              <line x1="12" y1="3" x2="12" y2="15"></line>
            </svg>
            <p class="upload-text">Drop your documents here</p>
            <p class="upload-subtext">or</p>
            <label class="browse-button">
              Browse Files
              <input type="file" class="file-input" name="image" />
            </label>
          </div>
          <div class="center">
            <button type="submit" class="b-button">submit</button>
          </div>
        </form>

        <!-- Documents List -->
        <div class="documents-header">
          <h2 class="documents-title">Uploaded Documents</h2>
          <input
            type="hidden"
            class="value"
            value="<%=employee._id%>"
            name="id"
          />

          <button class="reload-button" id="reloadBtn">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M21 2v6h-6"></path>
              <path d="M3 12a9 9 0 0 1 15-6.7L21 8"></path>
              <path d="M3 22v-6h6"></path>
              <path d="M21 12a9 9 0 0 1-15 6.7L3 16"></path>
            </svg>
            Reload
          </button>
        </div>

        <div class="documentsList">
          <!-- Empty state (shown by default) -->
          <% if (employee.uploaddocs.length > 0) { %>
          <!-- <div> -->
          <% employee.uploaddocs.forEach(function(doc) { %>
          <img src="<%= doc.doc %>" />
          <% }); %>
          <!-- </div> -->
          <% } %>
        </div>
      </div>
    </div>
    <!-- <script>
      const btn = document.querySelector(".reload-button");
      const main = document.querySelector(".documentsList");
      var valuesub = document.querySelector(".value");

      btn.addEventListener("click", () => {
        let val = valuesub.value;

        fetch(`/get-docs?id=${val}`)
          .then((response) => response.json())

          .then((data) => {
            console.log(data);
            console.log(typeof data);

            main.innerHTML = "";
            const productsArray = data.docs;
            console.log(productsArray);
            if (productsArray) {
              // Render productsArray by year

              const html = `
              ${productsArray
                .map((doc) => {
                  return `
               <img src="/${doc}">
                `;
                })
                .join("")}
              `;
              main.insertAdjacentHTML("beforeend", html);
            } else {
              const html = `<div class="empty-state">
            <svg
              class="empty-icon"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="12" y1="8" x2="12" y2="12"></line>
              <line x1="12" y1="16" x2="12.01" y2="16"></line>
            </svg>
            <p class="empty-text">No documents uploaded yet</p>
          </div>`;
              main.insertAdjacentHTML("beforeend", html);
            }
          });
      });
    </script> -->
    <!-- <script>
      const dropZone = document.getElementById("dropZone");
      const fileInput = document.querySelector(".file-input");
      const documentsList = document.getElementById("documentsList");
      const reloadBtn = document.getElementById("reloadBtn");

      // Prevent default drag behaviors
      ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
      });

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      // Highlight drop zone when item is dragged over it
      ["dragenter", "dragover"].forEach((eventName) => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ["dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      function highlight(e) {
        dropZone.classList.add("dragging");
      }

      function unhighlight(e) {
        dropZone.classList.remove("dragging");
      }

      // Handle dropped files
      dropZone.addEventListener("drop", handleDrop, false);
      fileInput.addEventListener("change", handleFileSelect, false);

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
      }

      function handleFileSelect(e) {
        const files = e.target.files;
        handleFiles(files);
      }

      function handleFiles(files) {
        const documents = Array.from(files).map((file) => ({
          id: Math.random().toString(36).substr(2, 9),
          name: file.name,
          size: formatFileSize(file.size),
          uploadDate: new Date(),
        }));

        updateDocumentsList(documents);
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      function updateDocumentsList(newDocuments) {
        // Get existing documents
        const existingDocuments = documentsList.querySelector(".documents-list")
          ? Array.from(documentsList.querySelectorAll(".document-item")).map(
              (item) => ({
                id: item.dataset.id,
                name: item.querySelector(".document-name").textContent,
                size: item
                  .querySelector(".document-meta")
                  .textContent.split("•")[0]
                  .trim(),
                uploadDate: new Date(
                  item
                    .querySelector(".document-meta")
                    .textContent.split("•")[1]
                    .trim()
                    .replace("Uploaded ", "")
                ),
              })
            )
          : [];

        const allDocuments = [...existingDocuments, ...newDocuments];

        if (allDocuments.length === 0) {
          documentsList.innerHTML = `
                    <div class="empty-state">
                        <svg class="empty-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                        <p class="empty-text">No documents uploaded yet</p>
                    </div>
                `;
          return;
        }

        const documentsHTML = allDocuments
          .map(
            (doc) => `
                <div class="document-item" data-id="${doc.id}">
                    <svg class="document-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                        <line x1="16" y1="13" x2="8" y2="13"></line>
                        <line x1="16" y1="17" x2="8" y2="17"></line>
                        <polyline points="10 9 9 9 8 9"></polyline>
                    </svg>
                    <div class="document-info">
                        <h3 class="document-name">${doc.name}</h3>
                        <p class="document-meta">${
                          doc.size
                        } • Uploaded ${doc.uploadDate.toLocaleDateString()}</p>
                    </div>
                </div>
            `
          )
          .join("");

        documentsList.innerHTML = `
                <div class="documents-list">
                    ${documentsHTML}
                </div>
            `;
      }

      // Reload button functionality
      reloadBtn.addEventListener("click", () => {
        // In a real application, this would fetch the latest documents from the server
        // For now, we'll just refresh the current list
        const currentDocuments = documentsList.querySelector(".documents-list")
          ? Array.from(documentsList.querySelectorAll(".document-item")).map(
              (item) => ({
                id: item.dataset.id,
                name: item.querySelector(".document-name").textContent,
                size: item
                  .querySelector(".document-meta")
                  .textContent.split("•")[0]
                  .trim(),
                uploadDate: new Date(
                  item
                    .querySelector(".document-meta")
                    .textContent.split("•")[1]
                    .trim()
                    .replace("Uploaded ", "")
                ),
              })
            )
          : [];
        updateDocumentsList(currentDocuments);
      });
    </script> -->
  </body>
</html>
